/**
 * @file
 * $RCSfile: WhDyAc/WhDyAc_generic/WhDyAcSig/Test/WhDyAcSigReg_test.c $
 * $Revision: 1.1 $
 * $Date: 2018/05/23 12:07:38CEST $
 * Confidential and proprietary. This document and its contents are the
 * exclusive property of Continental Teves AG & Co. OHG (Teves) and Conti Temic
 * microelectronic GmbH (Temic) and their associated companies. They are not to
 * be copied, distributed, or otherwise disclosed or used without the prior
 * written consent of Teves and Temic. All rights reserved.
 *
 * @author
 *
 *
 * @brief
 * CUnit test suite of WhDyAcSigRef
 *
 *
 */
#include <courage.h>
#include <mockup.h>
#include "Src/WhDyAcSig_Ref.h"
#include "../../../../../../../out/CT/VC1/gen/Src/EBS/FSW/VehSPP/VehSPP_generic/VehOnCfg/Src/gen/vehoncfg_ptdrive_pif.h"
#include "../../../../../../../out/PSA/UR3/gen/Src/EBS/FSW/VehDyC/VehDyC_generic/VehDyCSitu/Src/gen/vehdycsitutypes.h"

/*==================================================================
                           DEFINES
===================================================================*/
#define Senfault_ayc_ctrl_set_mask     (uint8)128u    /**< @brief Bit mask to set   Bit 7 (&= 0x80) of TC4WDREF_SENSOR_FAULT1 (SensorFault1_%w) if Wheel in stable AYC ctrl (SCS_OUT_WIN_SVC_%w) (LSB:-, UNIT:1) */
#define Senfault_ayc_ctrl_res_mask     (uint8)127u    /**< @brief Bit mask to reset Bit 7 (&= 0x7F) of TC4WDREF_SENSOR_FAULT1 (SensorFault1_%w) if Wheel not in stable AYC ctrl (SCS_OUT_WIN_SVC_%w) (LSB:-, UNIT:1) */
#define Tcs0_tq_max_val                (32000)           /**< @brief Maximum axle torque value (< Sint16_max) (LSB: 1, UNIT: Nm, pwt_axle_torque_t). */
#if (FEAT_POWERTRAIN_CFG__cCONTROLLABLE_CENTRAL_CLUTCH)
#define Tcs0_wheel_acc_neg_max         (-20)             /**< @brief Maximum neg. grad. (ACCF_%w) (LSB: 0.01, UNIT: g, wheel_acceleration_t). */
#endif

/*=======================================================================================
 VARIABLES
 =======================================================================================*/
boolean_t GET_WHDYAC_BRAKE_ACTIVE_btc_WhF;
boolean_t GET_WHDYAC_BRAKE_ACTIVE_btc_WhR;
pt_eng_id_t pt_eng_id;
sint16 fuzzy;
sint16 *ptr_Tcs0_4wd_min_allowed_slope_corr;

/*=======================================================================================
 EXTERNAL VARIABLES
 =======================================================================================*/
extern boolean_t GET_VEHDYC_BRAKE_ACTIVE_SUM__return;
extern uint16 GET_DRIVER_REQ_IDLE__return; /*!< @ASAP_NAME GET_DRIVER_REQ_IDLE__return */
extern boolean_t GET_WHDYAC_BRAKE_ACTIVE_SUM_btc__return; /*!< @ASAP_NAME GET_WHDYAC_BRAKE_ACTIVE_SUM_btc__return */
#if (CFG_FUNCTION_BTC_CONFMODE != NOT_AVAILABLE)
extern boolean_t GET_WHDYAC_BRAKE_ACTIVE_SUM_btc__return; /*!< @ASAP_NAME GET_WHDYAC_BRAKE_ACTIVE_SUM_btc__return */
#endif
#if (CFG_FUNCTION_MSR_CONFMODE != NOT_AVAILABLE)
extern boolean_t GET_WHDYAC_ENGINC_ACTIVE_SUM_edc__return; /*!< @ASAP_NAME GET_WHDYAC_ENGINC_ACTIVE_SUM_edc__return */
#endif
extern wheel_dir_validity_t GET_PL_WH_DIR_VALIDITY__return[CFG_NUM_OF_WHEELS];
extern wheel_direction_t GET_PL_WH_DIR_OF_ROT__return[CFG_NUM_OF_WHEELS];
extern boolean_t GET_TTC_FAST_MINISPARE_UNCONFIRMED__return[CFG_NUM_OF_WHEELS]; /*!< @ASAP_NAME GET_TTC_FAST_MINISPARE_UNCONFIRMED__return */
#if ((CFG_PT_DRIVE_TYPE & cPT_DRIVE_TYPE_VAR_ONCONF) == 0)
extern unsigned char    ONCONF_PT_DRIVE_TYPE;
#endif
extern unsigned_char_t Port__SSI_V_ACCR_PEDL_RAT;


static void
Tc4wd_Support_Conditions_Do_Clutch_Set ()
{
  /*----------------------------------------------- */
  /*                  set DO_CLUTCH                 */
  /*----------------------------------------------- */
#if (((POWERTRAIN_CFG&0x01) != 0) || ((POWERTRAIN_CFG&0x100) != 0))
  COU_SET(BUS_CLUTCH_RESPONSE[Clutch_central].INFO.QUALIFIER, False, "");
  COU_SET(BUS_CLUTCH_RESPONSE[Clutch_central].TORQUE, 500, "");
#endif
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
#if (TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1)
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, False,"Get_pulled_handbr_recognized() = False");
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");
  COU_SET(TCS_MUEXY_OPT[Pt_drive_prim_driven_wh_le[ONCONF_PT_DRIVE_TYPE]], (Tcs0_4wd_clutch_mue_thr * 32) - 1 ,"TCS_MUEXY_OPT[Get_prim_driven_wh_le()] < (Tcs0_4wd_clutch_mue_thr * 32)");
#if (((POWERTRAIN_CFG & 0x01) != 0) && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE ))
  COU_SET(TCS_RESISTANCE_ROAD, Tcs0_4wd_resist_cond_clutch - 1,"TCS_RESISTANCE_ROAD < Tcs0_4wd_resist_cond_clutch");
#endif
#if (TC4WD_NO_TOD_CLUTCH_OPEN_CFG == 2)
  COU_SET(TCS_LAT_ACCELERATION, Tcs0_4wd_lmcurve_lat_acc_thr - 1,"(DABS_F(TCS_LAT_ACCELERATION)) < Tcs0_4wd_lmcurve_lat_acc_thr");
  COU_SET(TCS_LAT_ACC_FROM_SWA, Tcs0_4wd_lmcurve_lat_acc_thr - 1,"TCS_LAT_ACC_FROM_SWA < Tcs0_4wd_lmcurve_lat_acc_thr");
#endif
  COU_SET(TC4WD_SUPPORT.REF_FAILURE , TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 100,"TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False,"Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False,"Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False,"Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False,"Get_sensor_fault_wh4() = False");
#endif
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return,False,"return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1,"ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1,"ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE,True,"Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF,True,"Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO,Tcs_4wd_downhill_velo_thr + 1,"TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");
#endif/* TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1 */
#endif /* POWERTRAIN_CFG & 0x01 */
}/*Tc4wd_Support_Conditions_Do_Clutch_Set*/

static void Tc4wd_Support_Conditions_Do_Clutch_Reset ()
{
#if ((POWERTRAIN_CFG & 0x01) != 0)
#if (TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1)
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, True,"Get_pulled_handbr_recognized() = True");
  //	COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 10,"TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
#endif
}
static
void Tc4wd_Support_Conditions_Doubt2_Set ()
{
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
#endif

#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1,"ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1,"ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO, Tcs_4wd_downhill_velo_thr + 1, "TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");

}/*Tc4wd_Support_Conditions_Doubt2_Set*/

static
void Tc4wd_Support_Conditions_Do_Engine_Set ()
{
  /*----------------------------------------------- */
  /*    set DO_ENGINE  (SppDoEng)                   */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(TC4WD_SUPPORT.REF_FAILURE,TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 1,"TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1,"ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1,"ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO, Tcs_4wd_downhill_velo_thr + 1, "TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX,(100 * Tcs0_4wd_possible_accel_gap) - TCS_LONG_SENS_VEHACC,"(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, True, "Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO, False, "Get_reverse_driving_info() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
#endif

}/*Tc4wd_Support_Conditions_Do_Engine_Set*/

static void
Tc4wd_Support_Conditions_Do_Engine_Reset ()
{
  //	Tc4wd_Support_Conditions_Doubt2_Reset();
  //	COU_SET(TC4WD_SUPPORT.REF_FAILURE,TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 10,"TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX,( 100 * Tcs0_4wd_possible_accel_gap) + 100 ,"(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,False,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
#endif
#endif
}/*Tc4wd_Support_Conditions_Do_Engine_Reset*/

static void
Tc4wd_Support_Conditions_Do_Brake_Set ()
{
  /*----------------------------------------------- */
  /*    set DO_BRAKE  (SppDoBrk)                    */
  /*----------------------------------------------- */
  Tc4wd_Support_Conditions_Doubt2_Set ();
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 100, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE,False,"TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = False");
#endif
#endif

}/*Tc4wd_Support_Conditions_Do_Brake_Set*/

static void
Tc4wd_Support_Conditions_Do_Brake_Reset ()
{
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.CONDITIONS.DOUBT1,False,"TC4WD_SUPPORT.CONDITIONS.DOUBT1 = False");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True");

  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, True, "Get_sensor_fault_wh1() = True");
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX, (100 * Tcs0_4wd_possible_accel_gap) - TCS_LONG_SENS_VEHACC, "(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)");
#endif
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, True, "Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO, False, "Get_reverse_driving_info() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
#endif
}/*Tc4wd_Support_Conditions_Do_Brake_Reset*/

/*=======================================================================================
 TEST CASES
 =======================================================================================*/


/**
 * @brief
 * Determine, if vehicle is forward driving  (SppFwdDrv)
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. Return value of function Get_driving_direction_valid() set as True
 *    Return value of function Get_reverse_driving_info() set as False
 *    Return value of function Get_ayc_reverse_movement() set as False
 *    Return value of function Get_ayc_reverse_det_possible() set as False
 *
 * b. Return value of function Get_driving_direction_valid() set as False
 *    Return value of function Get_ayc_reverse_movement() set as True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING should True;
 * b. TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING should False;
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17673457-v1x, SW_REQ_17754216-v1x, SW_REQ_17719902-v1x, SW_REQ_17754228-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_01,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_01")
{
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, True, "Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO, False, "Get_reverse_driving_info() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_INITIALISE (), "Calling Initialization function");
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True, "TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
#endif
#endif
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, False, "Get_driving_direction_valid() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,True,"Get_ayc_reverse_movement() = True");
#endif
#endif

#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING, False, "TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING == False;");
    COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING, False, "TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING == False;");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING, False, "TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING == False;");

#endif
#endif

}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_01*/

/**************************************************************************************************************************************/

/**
 * @brief
 * Save slope and RefFailure used for pattern recognition
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown
 *    (ESTIMATED_SLOPE_FILTERED) >= ( TC4WD_SUPPORT . ENTRY_SLOPE )
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.ENTRY_SLOPE == MAX(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED)
 * b. TC4WD_SUPPORT.ENTRY_REF_FAILURE = TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17674248-v1x, SW_REQ_17720590-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_02,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_02")
{
  /*------------------------------------------------------- */
  /* Save slope and RefFailure used for pattern recognition */
  /* ------------------------------------------------------ */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.ENTRY_SLOPE,MAX(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED), "TC4WD_SUPPORT.ENTRY_SLOPE == MAX(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED);");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(ESTIMATED_SLOPE_FILTERED, (TC4WD_SUPPORT.ENTRY_SLOPE) - 1, "( ESTIMATED_SLOPE_FILTERED ) >= ( TC4WD_SUPPORT . ENTRY_SLOPE )");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_pattern_ref_high_gsens,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED, "TC4WD_SUPPORT.ENTRY_SLOPE = ESTIMATED_SLOPE_FILTERED; ");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.ENTRY_REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE, "TC4WD_SUPPORT.ENTRY_REF_FAILURE = TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_02*/

/**************************************************************************************************************************************/

/**
 * @brief
 * calculate MAX_REF_FAILURE  (SppRefFailThr)
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *  return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) set to True
 *  taking backup of global variable TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE value before function call
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * Value of global variable TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE reduced by 80
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17720618-v1x, SW_REQ_17739772-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_03,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_03")
{
  /*----------------------------------------------- */
  /*    calculate MAX_REF_FAILURE  (SppRefFailThr)  */
  /* ---------------------------------------------- */
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, True, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) == True");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  wheel_velocity_t old_val = TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE,old_val - 80, "TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE -= 80");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_03*/

/**************************************************************************************************************************************/

/**
 * @brief
 * calculate ENGINE_MAX_TIME  (SppMaxEngTim)
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_low
 *    ESTIMATED_SLOPE_ACTUAL = 1500
 *    ESTIMATED_SLOPE_FILTERED = 500
 *    return value of Get_ayc_engine_control() set to True
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) set to True
 *
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_low
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) set to False
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME equal to Tcs0_4wd_feedback_max_time
 * b. TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME equal to Tcs0_4wd_feedback_min_time
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17677761-v1x, SW_REQ_17754393-v1x,SW_REQ_17739893-v1x, SW_REQ_17754424-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_04,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_04")
{
  /*----------------------------------------------- */
  /*    calculate ENGINE_MAX_TIME  (SppMaxEngTim)   */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,! Tc4wd_sup_act_doubt_ref_low,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_low");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_ACTUAL,1500,"ESTIMATED_SLOPE_ACTUAL = 1500");
  COU_SET(ESTIMATED_SLOPE_FILTERED,500,"ESTIMATED_SLOPE_FILTERED = 500");
#endif
#endif
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),True,"Get_ayc_engine_control() == True");
#endif
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, True, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) == True");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME, Tcs0_4wd_feedback_max_time, "TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME = Tcs0_4wd_feedback_max_time");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_low,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_low");
#endif
#endif
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME, Tcs0_4wd_feedback_min_time, "TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME = Tcs0_4wd_feedback_min_time");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_04*/

/**************************************************************************************************************************************/

/**
 * @brief
 * calculate GSENS_MAX_TIME  (SppMaxGSensTim)
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED < 0
 * b. TCS_ACTUAL_TF_TORQUE = 2000
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME equal to Tcs0_4wd_gsens_cnt_thr + 200
 * b. TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME equal to Tcs0_4wd_gsens_cnt_thr
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17677831-v1x, SW_REQ_17740099-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_05,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_05")
{
  /*----------------------------------------------- */
  /*    calculate GSENS_MAX_TIME  (SppMaxGSensTim)  */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED, (-31),"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED < 0");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME,Tcs0_4wd_gsens_cnt_thr + 200, "TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME = Tcs0_4wd_gsens_cnt_thr + 200");
#endif
  COU_SET(TCS_ACTUAL_TF_TORQUE, 2000, "TCS_ACTUAL_TF_TORQUE = 2000");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME, Tcs0_4wd_gsens_cnt_thr, "TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME = Tcs0_4wd_gsens_cnt_thr");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_05*/

/**************************************************************************************************************************************/

/**
 * @brief
 * calculate CLUTCH_MAX_TIME  (SppMaxCluTim)
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER < (Tcs0_4wd_clutch_deadtime_thr + (sint16)Scaled_time(140u))
 * b. TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER > (Tcs0_4wd_clutch_deadtime_thr + (sint16)Scaled_time(140u))
 *    TC4WDREF_CLUTCH_ACCELERATION_TIMER > needed_est_time
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME == Tcs0_4wd_clutch_max_open_time
 * b. TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME == Tcs0_4wd_clutch_min_open_time
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17754653-v1x, SW_REQ_17677921-v1x, SW_REQ_17740167-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_06,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_06")
{
  /*----------------------------------------------- */
  /*    calculate CLUTCH_MAX_TIME  (SppMaxCluTim)   */
  /*----------------------------------------------- */
#if ((POWERTRAIN_CFG & 0x01) != 0)

  sint16 needed_est_time;

  COU_SET(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, (Tcs0_4wd_clutch_deadtime_thr + (sint16)Scaled_time(140u /*ms*/)-1),"TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER < (Tcs0_4wd_clutch_deadtime_thr + (sint16)Scaled_time(140u /*ms*/)) ");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME,Tcs0_4wd_clutch_max_open_time, "TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME == Tcs0_4wd_clutch_max_open_time");

  COU_SET(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, (Tcs0_4wd_clutch_deadtime_thr + (sint16)Scaled_time(140u /*ms*/)+1),"TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER > (Tcs0_4wd_clutch_deadtime_thr + (sint16)Scaled_time(140u /*ms*/)) ");

  needed_est_time = (sint16)CALCULATE_THRESHOLD_FROM_PARAMTABLE
      (Tcs_4wd_clutch_min_est_time, TC4WD_SUPPORT.REF_FAILURE);

  needed_est_time = (sint16)(uint16)Scaled_time((uint16)needed_est_time);

  COU_SET(TC4WDREF_CLUTCH_ACCELERATION_TIMER, needed_est_time+1,"TC4WDREF_CLUTCH_ACCELERATION_TIMER > needed_est_time");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif

  COU_ASSERT_EQUAL(TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME,Tcs0_4wd_clutch_min_open_time, "TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME == Tcs0_4wd_clutch_min_open_time");

#endif  /* end of POWERTRAIN_CFG */
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_06*/

/**************************************************************************************************************************************/

/**
 * @brief
 *  set DOUBT2   (SppDoubt2)
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. Return value of function Get_driver_req_idle_qf() set to False
 *    Get_driver_req_idle((uint16)Tcs0_pedal_pos_idle_thr) set to True
 * b. Return value of Get_sensor_fault_wh1() set to False
 * c. Return value of Get_sensor_fault_wh1() set to False
 *    Return value of Get_sensor_fault_wh2() set to False
 *    Return value of Get_sensor_fault_wh3() set to False
 *    Return value of Get_sensor_fault_wh4() set to False
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) set to False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Return Value of Get_tcs_long_sens_available() set to True
 *    Return Value of Get_driver_req_idle_qf() set to True
 *    TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr
 *
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. Value of Global variable TC4WD_SUPPORT.CONDITIONS.DOUBT2 should False
 * b. Value of Global variable TC4WD_SUPPORT.CONDITIONS.DOUBT2 should True
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17678167-v1x, SW_REQ_17742356-v1x, SW_REQ_17742376-v1x, SW_REQ_17742506-v1x, SW_REQ_17754787-v1x, SW_REQ_17742774-v1x, SW_REQ_17755280-v1x
 *
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_07,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_07 ")
{
  /*----------------------------------------------- */
  /*    set DOUBT2   (SppDoubt2)                    */
  /*----------------------------------------------- */
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, False, "Get_driver_req_idle_qf() = False");
  COU_SET(GET_DRIVER_REQ_IDLE__return, True, "Get_driver_req_idle((uint16)Tcs0_pedal_pos_idle_thr) = 1u /* True */");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DOUBT2,False, "TC4WD_SUPPORT.CONDITIONS.DOUBT2 == False");
#endif
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, True, "Get_sensor_fault_wh1() = True");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DOUBT2, False, "TC4WD_SUPPORT.CONDITIONS.DOUBT2 == False");
#endif
#endif
  Tc4wd_Support_Conditions_Doubt2_Set ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DOUBT2, True, "TC4WD_SUPPORT.CONDITIONS.DOUBT2 == True");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_07*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) > (100 * Tcs0_4wd_possible_accel_gap)
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_ayc_engine_control() = False
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *
 * b. Get_tcs_long_sens_available() = False
 *
 * c. Get_tcs_long_sens_available() = False
 *    TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)
 *    Get_ayc_engine_control() = True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.LOW_BY_CLUTCH should True
 *    TC4WD_SUPPORT.CONDITIONS.LOW_BY_BRAKE  should False
 *    TC4WD_SUPPORT.CONDITIONS.LOW_BY_ENGINE should True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_CLUTCH should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_BRAKE should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_ENGINE should False
 *
 * b. TC4WD_SUPPORT.CONDITIONS.LOW_BY_CLUTCH should False
 *    TC4WD_SUPPORT.CONDITIONS.LOW_BY_BRAKE  should False
 *    TC4WD_SUPPORT.CONDITIONS.LOW_BY_ENGINE should False
 *
 * c. TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_CLUTCH should True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_BRAKE should True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_ENGINE should True
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17743149-v1x, SW_REQ_17755416-v1x, SW_REQ_17747688-v1x, SW_REQ_17755580-v1x, SW_REQ_17755598-v1x, SW_REQ_17759035-v1x, SW_REQ_17759041-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_08,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_08 ")
{

  /*---------------------------------------------------------------- */
  /*   LOW_BY_CLUTC`H, LOW_BY_ BRAKE, LOW_BY_ ENGINE and RESET_LOW    */
  /*---------------------------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX,((100 * Tcs0_4wd_possible_accel_gap)+1),"(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) > (100 * Tcs0_4wd_possible_accel_gap)");
  COU_SET(ESTIMATED_SLOPE_FILTERED,Tcs0_4wd_slope_thr +1,"ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr");
  COU_SET(ESTIMATED_SLOPE_ACTUAL,ESTIMATED_SLOPE_FILTERED+1,"ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED");
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE )
  COU_SET(Get_ayc_engine_control(),False,"Get_ayc_engine_control() = False");
#endif/*CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.REF_FAILURE,TC4WD_SUPPORT.ENTRY_REF_FAILURE+1,"TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))       /* 23954:1ruckh200706 */
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.LOW_BY_CLUTCH, True, "TC4WD_SUPPORT.CONDITIONS.LOW_BY_CLUTCH == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.LOW_BY_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.LOW_BY_BRAKE  == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.LOW_BY_ENGINE, True, "TC4WD_SUPPORT.CONDITIONS.LOW_BY_ENGINE == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_CLUTCH, False, "TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_CLUTCH == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_BRAKE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_ENGINE == False");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, False, "Get_tcs_long_sens_available() = False");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))       /* 23954:1ruckh200706 */

  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.LOW_BY_CLUTCH, False, "TC4WD_SUPPORT.CONDITIONS.LOW_BY_CLUTCH == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.LOW_BY_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.LOW_BY_BRAKE  == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.LOW_BY_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.LOW_BY_ENGINE == False");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, False, "Get_tcs_long_sens_available() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED + 500, "TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)");
#endif
#endif
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),True,"Get_ayc_engine_control() = True");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_CLUTCH, True, "TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_CLUTCH == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_BRAKE, True, "TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_BRAKE == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_ENGINE, True, "TC4WD_SUPPORT.CONDITIONS.RESET_LOW_BY_ENGINE == True");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_08*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *    Get_ayc_engine_control() = True
 *    TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)
 *    Get_tcs_long_sens_available() = True
 *    Get_sensor_fault_wh1() = False
 *    Get_sensor_fault_wh2() = False
 *    Get_sensor_fault_wh3() = False
 *    Get_sensor_fault_wh4() = False
 *
 * b. TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *    Get_tcs_long_sens_available() = False
 *
 * c. TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *    Get_tcs_long_sens_available() = False
 *    TC4WD_SUPPORT.ENTRY_SLOPE <= ESTIMATED_SLOPE_FILTERED
 *    Get_ayc_engine_control() = False
 *
 * d. TC4WD_SUPPORT.ENTRY_SLOPE <= ESTIMATED_SLOPE_FILTERED
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.HIGH_BY_CLUTCH should True
 *    TC4WD_SUPPORT.CONDITIONS.HIGH_BY_BRAKE should True
 *    TC4WD_SUPPORT.CONDITIONS.HIGH_BY_ENGINE should True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE should False
 *
 * b. TC4WD_SUPPORT.CONDITIONS.HIGH_BY_CLUTCH should False
 *    TC4WD_SUPPORT.CONDITIONS.HIGH_BY_BRAKE should False
 *    TC4WD_SUPPORT.CONDITIONS.HIGH_BY_ENGINE should False
 *
 * c. TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH should True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE should True
 *
 * d. TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE should False
 *    TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE should False
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17679125-v1x, SW_REQ_17759087-v1x, SW_REQ_17747845-v1x, SW_REQ_17759105-v1x, SW_REQ_17759184-v1x, SW_REQ_17759263-v1x, SW_REQ_17759268-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_09,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_09 ")
{
  /*------------------------------------------------------------------------- */
  /*       HIGH_BY_CLUTCH, HIGH_BY_BRAKE, HIGH_BY_ENGINE and RESET_HIGH       */
  /*------------------------------------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.REF_FAILURE,TC4WD_SUPPORT.ENTRY_REF_FAILURE - 1,"TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.ENTRY_REF_FAILURE");
#endif
#endif
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),True,"Get_ayc_engine_control() = True");
#endif/*CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE*/
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE,(ESTIMATED_SLOPE_FILTERED + 400)+1,"TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)");
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.HIGH_BY_CLUTCH ,True, "TC4WD_SUPPORT.CONDITIONS.HIGH_BY_CLUTCH == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.HIGH_BY_BRAKE ,True, "TC4WD_SUPPORT.CONDITIONS.HIGH_BY_BRAKE == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.HIGH_BY_ENGINE ,True, "TC4WD_SUPPORT.CONDITIONS.HIGH_BY_ENGINE == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH ,False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE ,False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE ,False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE == False");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.ENTRY_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, False, "Get_tcs_long_sens_available() = False");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.HIGH_BY_CLUTCH, False, "TC4WD_SUPPORT.CONDITIONS.HIGH_BY_CLUTCH == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.HIGH_BY_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.HIGH_BY_BRAKE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.HIGH_BY_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.HIGH_BY_ENGINE == False");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.ENTRY_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE");

#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, False, "Get_tcs_long_sens_available() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED, "TC4WD_SUPPORT.ENTRY_SLOPE <= ESTIMATED_SLOPE_FILTERED");
#endif
#endif
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),False,"Get_ayc_engine_control() = False");
#endif/*CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH, True, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE, True, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE == True");
  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED, "TC4WD_SUPPORT.ENTRY_SLOPE <= ESTIMATED_SLOPE_FILTERED");

#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 350), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH, False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_CLUTCH == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_BRAKE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.RESET_HIGH_BY_ENGINE == False");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_09*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = True
 *
 * b. return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.DO_GSENS should True
 *
 * b. TC4WD_SUPPORT.CONDITIONS.DO_GSENS should False
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17683821-v1x, SW_REQ_17760332-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_10,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_10 ")
{
  /*----------------------------------------------- */
  /*                 set DO_GSENS                   */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX,(100 * Tcs0_4wd_possible_accel_gap) - 1,"(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap) ");
#endif
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, True, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = True");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_GSENS,True, "TC4WD_SUPPORT.CONDITIONS.DO_GSENS == True");
#endif
#endif
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_GSENS, False, "TC4WD_SUPPORT.CONDITIONS.DO_GSENS == False");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_10*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. ESTIMATED_SLOPE_SAVE > (ESTIMATED_SLOPE_FILTERED - 400)
 *
 * b. ESTIMATED_SLOPE_SAVE < (ESTIMATED_SLOPE_FILTERED - 400)
 *    Get_vsupp_eng_disabled() = False
 *    Get_tcs_long_sens_available() = True
 *    Get_sensor_fault_wh1() = False
 *    Get_sensor_fault_wh2() = False
 *    Get_sensor_fault_wh3() = False
 *    Get_sensor_fault_wh4() = False
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.STOP_TOO_LOW should True
 *
 * b. TC4WD_SUPPORT.CONDITIONS.STOP_TOO_LOW = False
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17684033-v1x, SW_REQ_17760354-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_11,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_11 ")
{
  /*----------------------------------------------- */
  /*                 set STOP_TOO_LOW               */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(ESTIMATED_SLOPE_SAVE,(ESTIMATED_SLOPE_FILTERED - 400) + 1,"ESTIMATED_SLOPE_SAVE > (ESTIMATED_SLOPE_FILTERED - 400) ");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 150), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_TOO_LOW,True, "TC4WD_SUPPORT.CONDITIONS.STOP_TOO_LOW = True");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_SAVE, (ESTIMATED_SLOPE_FILTERED - 400) - 1, "ESTIMATED_SLOPE_SAVE < (ESTIMATED_SLOPE_FILTERED - 400) ");
#endif
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, False, "Get_vsupp_eng_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_TOO_LOW, False, "TC4WD_SUPPORT.CONDITIONS.STOP_TOO_LOW = False");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_11*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. Get_tcs_my_split_modus() = False
 *    Get_tcs_my_split_modus() = False
 *    Get_vsupp_clu_disabled() = False
 *    Get_tcs_long_sens_available() = True
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() set as  False
 *    TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH = False
 *    TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u)
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH should True
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17684165-v1x, SW_REQ_17760403-v1x, SW_REQ_17760411-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_12,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_12 ")
{
  /*----------------------------------------------- */
  /*               set STOP_TOO_HIGH                */
  /*----------------------------------------------- */
  pt_eng_id_t pt_eng_id;

  for ((pt_eng_id) = Pt_eng_id0; (pt_eng_id) <= Get_last_conf_pt_eng_id (); (pt_eng_id)++) /* All_configured_pt_eng_ids(pt_eng_id) replacement ?? */
    {
      COU_SET(TCS_END_TIMER[pt_eng_id], 217, "TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u /*ms*/)");
    }
  COU_SET(WHDYAC_DRIVING_SITUATION_I.TCS_MY_SPLIT_MODUS, False, "Get_tcs_my_split_modus() = False");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_LAT_ACCELERATION, (Tcs_4wd_clutch_lat_acc_thr + Tcs0_4wd_lat_acc_hyst) - 1, "Get_tcs_my_split_modus() = False");
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, False, "Get_vsupp_eng_disabled() = False");
  COU_SET(WHDYACFD_DISABLE.VSUPP_CLU_DISABLED, False, "Get_vsupp_clu_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH, False, "TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH = False");
#endif
#endif
  for ((pt_eng_id) = Pt_eng_id0; (pt_eng_id) <= Get_last_conf_pt_eng_id (); (pt_eng_id)++) /* All_configured_pt_eng_ids(pt_eng_id) replacement ?? */
    {
      COU_SET(TCS_END_TIMER[pt_eng_id], 2170, "TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u /*ms*/)");
    }
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH, True, "TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH = True");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_12*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. Get_pulled_handbr_recognized() = False
 *    bus_clutch_signal.INFO.QUALIFIER = False
 *    TCS_MUEXY_OPT[Get_prim_driven_wh_le()] < (Tcs0_4wd_clutch_mue_thr * 32)
 *    TCS_RESISTANCE_ROAD < Tcs0_4wd_resist_cond_clutch
 *    (DABS_F(TCS_LAT_ACCELERATION)) < Tcs0_4wd_lmcurve_lat_acc_thr
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_tcs_long_sens_available() = True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.DO_CLUTCH should False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17760416-v1x, SW_REQ_17748080-v1x, SW_REQ_17760426-v1x, SW_REQ_17760481-v1x, SW_REQ_17748158-v1x, SW_REQ_17760505-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_13,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_13 ")
{
  Tc4wd_Support_Conditions_Do_Clutch_Set ();
#if ((POWERTRAIN_CFG & 0x01) != 0)
#if (TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1)
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_CLUTCH,(Tcs0_4wd_ref_supp_clutch_enable != 0), "TC4WD_SUPPORT.CONDITIONS.DO_CLUTCH = (Tcs0_4wd_ref_supp_clutch_enable != 0)");
#endif
#endif

  Tc4wd_Support_Conditions_Do_Clutch_Reset ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_CLUTCH, False, "TC4WD_SUPPORT.CONDITIONS.DO_CLUTCH = False");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_13*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() set as  False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_tcs_long_sens_available() = True
 * b. (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)
 *    TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.DO_ENGINE should True
 * b. TC4WD_SUPPORT.CONDITIONS.DO_ENGINE should False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17748176-v1x, SW_REQ_17760526-v1x, SW_REQ_17760531-v1x, SW_REQ_17760547-v1x, SW_REQ_17760565-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_14,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_14")
{
  /*----------------------------------------------- */
  /*    set DO_ENGINE  (SppDoEng)                   */
  /*----------------------------------------------- */
  Tc4wd_Support_Conditions_Do_Engine_Set ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_ENGINE, (Tcs0_4wd_ref_supp_engine_enable != 0), "TC4WD_SUPPORT.CONDITIONS.DO_ENGINE = (Tcs0_4wd_ref_supp_engine_enable != 0)");
#endif
#endif
  Tc4wd_Support_Conditions_Do_Engine_Reset ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.DO_ENGINE = False");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = False
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 * b. TC4WD_SUPPORT.CONDITIONS.DOUBT1 = False
 *    TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() = True
 *    TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True
 *    (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)
 *    Get_driving_direction_valid() = True
 *    Get_reverse_driving_info() = False
 *    Get_ayc_reverse_movement() = False
 *    Get_ayc_reverse_det_possible() = False
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.DO_BRAKE should True
 * b. TC4WD_SUPPORT.CONDITIONS.DO_BRAKE should False
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17748237-v1x, SW_REQ_17760587-v1x, SW_REQ_17748298-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_15,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_15")
{
  /*----------------------------------------------- */
  /*    set DO_BRAKE  (SppDoBrk)                    */
  /*----------------------------------------------- */
  Tc4wd_Support_Conditions_Do_Brake_Set ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_BRAKE, (Tcs0_4wd_ref_supp_brake_enable != 0), "TC4WD_SUPPORT.CONDITIONS.DO_BRAKE = (Tcs0_4wd_ref_supp_brake_enable != 0)");
#endif
#endif
  Tc4wd_Support_Conditions_Do_Brake_Reset ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.DO_BRAKE == False");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_high
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE should True
 * b. TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE should False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17760645-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_16,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_16")
{
  /*----------------------------------------------- */
  /*    set DO_ENGINE_AFTER_BRAKE  (SppDoAft1)      */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_high,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE, (Tcs0_4wd_ref_supp_engine_enable != 0), "TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE == (Tcs0_4wd_ref_supp_engine_enable != 0)");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_low,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_high");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 30), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE, False, "TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE = False");
#endif
#endif

}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = False
 *    TC4WD_SUPPORT.CONDITIONS.DOUBT1 = True
 *    TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high
 * b. TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True
 *    TC4WD_SUPPORT.CONDITIONS.DOUBT1 = False
 *    TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_high
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE should True
 * b. TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE should False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17748454-v1x, SW_REQ_17760724-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_17,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_17")
{
  /*----------------------------------------------- */
  /*    set DO_BRAKE_AFTER_ENGINE (SppDoAft2)       */
  /*----------------------------------------------- */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE,False,"TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = False");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.DOUBT1, True, "TC4WD_SUPPORT.CONDITIONS.DOUBT1 = True");

#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_high,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE, (Tcs0_4wd_ref_supp_brake_enable != 0), "TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE = (Tcs0_4wd_ref_supp_brake_enable != 0)");

  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.DOUBT1, False, "TC4WD_SUPPORT.CONDITIONS.DOUBT1 = False");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_high");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE = False");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. Get_vsupp_eng_disabled() = True
 * b. Get_vsupp_eng_disabled() = False
 *    Get_tcs_long_sens_available() = True
 *    Get_driving_direction_valid() = True
 *    Get_reverse_driving_info() = False
 *    Get_ayc_reverse_movement() = False
 *    Get_ayc_reverse_det_possible() = False
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.STOP_ENGINE should True
 * b. TC4WD_SUPPORT.CONDITIONS.STOP_ENGINE should False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17748493-v1x, SW_REQ_17760795-v1x, SW_REQ_17748534-v1x, SW_REQ_17761028-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_18,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_18")
{
  /*----------------------------------------------- */
  /*    set STOP_ENGINE  (SppStpEng)                */
  /*----------------------------------------------- */
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, True, "Get_vsupp_eng_disabled() = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_ENGINE, True, "TC4WD_SUPPORT.CONDITIONS.STOP_ENGINE == True");
#endif
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, False, "Get_vsupp_eng_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, True, "Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO, False, "Get_reverse_driving_info() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_ENGINE, False, "TC4WD_SUPPORT.CONDITIONS.STOP_ENGINE = False");
#endif
#endif
  /*----------------------------------------------- */
  /*    set FORCE_ZERO_BRAKE  (SppForce)            */
  /*----------------------------------------------- */
#if (CFG_SENSOR_TEM_HCU)
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, True,"Get_tcs_vehicle_braking() = True");

#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.FORCE_ZERO_BRAKE, True, "TC4WD_SUPPORT.CONDITIONS.FORCE_ZERO_BRAKE == True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. Get_pulled_handbr_recognized() = True
 * b. bus_clutch_signal.INFO.QUALIFIER = False
 *    Get_pulled_handbr_recognized() = False
 *    Get_vsupp_clu_disabled() = False
 *    Get_tcs_long_sens_available() = True
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    TCS_RESISTANCE_ROAD < Tcs0_4wd_resist_cond_clutch
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH should True
 * b. TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH should False
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17748637-v1x, SW_REQ_17761757-v1x, SW_REQ_17761929-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_19,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_19")
{
  /*----------------------------------------------- */
  /*    set STOP_CLUTCH  (SppStpClu)                */
  /*----------------------------------------------- */
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, True,"Get_pulled_handbr_recognized() = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH,True, "TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH == True");
#endif

#if ((POWERTRAIN_CFG & 0x01) != 0)
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, False,"Get_pulled_handbr_recognized() = False");
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");
  COU_SET(WHDYACFD_DISABLE.VSUPP_CLU_DISABLED,False,"Get_vsupp_clu_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE,True,"Get_tcs_long_sens_available() = True");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False,"Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False,"Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False,"Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False,"Get_sensor_fault_wh4() = False");
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE )
  COU_SET(TCS_RESISTANCE_ROAD, Tcs0_4wd_resist_cond_clutch - 1,"TCS_RESISTANCE_ROAD < Tcs0_4wd_resist_cond_clutch");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH, False, "TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH == False");
#endif
#endif
}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_19*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_PRE_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPP_REQU.CLUTCH_TORQUE = 0
 *    TC4WD_SUPP_REQU.CLUTCH_TORQUE = 0
 * b. TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.CONDITIONS.RESET_CLUTCH_DEADTIMER should True
 * b. TC4WD_SUPPORT.CONDITIONS.RESET_CLUTCH_DEADTIMER should False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17748700-v1x, SW_REQ_17761994-v1x
 */
COU_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_20,"Test case TC4WD_SUPPORT_PRE_PROCESSING_Test_20")
{
  /*----------------------------------------------- */
  /*    set RESET_CLUTCH_DEADTIMER  (SppRCluD)      */
  /*----------------------------------------------- */
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
#if (TCS_CONTINOUS_CLUTCH_CFG)
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,0,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 0");
#else
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,0,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 0");
#endif

#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_CLUTCH_DEADTIMER,True, "TC4WD_SUPPORT.CONDITIONS.RESET_CLUTCH_DEADTIMER == True");

#endif

#if ((POWERTRAIN_CFG & 0x01) != 0)
#if (TCS_CONTINOUS_CLUTCH_CFG)
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,600,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200");
#else
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,600,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.CONDITIONS.RESET_CLUTCH_DEADTIMER, False, "TC4WD_SUPPORT.CONDITIONS.RESET_CLUTCH_DEADTIMER == False");
#endif
#endif

}/*TC4WD_SUPPORT_PRE_PROCESSING_Test_20*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_ACTIVATION() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. case Tc4wd_sup_default
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh1() = False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_tcs_long_sens_available() = True
 *    Get_driver_req_idle_qf() = True
 *    TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False
 *    (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) > (100 * Tcs0_4wd_possible_accel_gap)
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_ayc_engine_control() = False
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *    TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False
 *    (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)
 *    TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *    Get_ayc_engine_control() = True
 *    TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)
 *    Get_tcs_long_sens_available() = True
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh1() = False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_doubt_unknown
 * b. TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE should False
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP should True
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_START should False
 *    TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_default
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_doubt_ref_low
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_doubt_ref_high
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17684464-v1x, SW_REQ_17686490-v1x, SW_REQ_17762475-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_01,"Test case TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_01")
{
  /*case Tc4wd_sup_default:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_default,"case Tc4wd_sup_default");
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
  COU_SET(TCS_LAT_ACCELERATION, Tcs_4wd_clutch_lat_acc_thr - 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1, "ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");

#endif
 #if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO, Tcs_4wd_downhill_velo_thr + 1, "TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown");
#endif
#endif
  /*case Tc4wd_sup_act_doubt_unknown:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_START, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_START == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False");

#endif
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1, "ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED");
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX,((100 * Tcs0_4wd_possible_accel_gap)+1),"(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) > (100 * Tcs0_4wd_possible_accel_gap)");

#endif
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE )
  COU_SET(Get_ayc_engine_control(),False,"Get_ayc_engine_control() = False");
#endif/*CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE */
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.ENTRY_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH, True, "TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_low, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_ref_low");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");

  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.ENTRY_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.ENTRY_REF_FAILURE");

#endif

  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX, ((100 * Tcs0_4wd_possible_accel_gap) - 1), "(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)   ");
#endif
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),True,"Get_ayc_engine_control() = True");
#endif/*CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE, (ESTIMATED_SLOPE_FILTERED + 400) + 1, "TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)");
#endif
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH, True, "TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True");

#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");

  COU_SET(TCS_LAT_ACCELERATION, Tcs_4wd_clutch_lat_acc_thr - 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_high, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_ref_high");
#endif
#endif
}/*TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_01*/

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_ACTIVATION() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE
 *    Get_tcs_long_sens_available() = False
 *    TC4WD_SUPPORT.ENTRY_SLOPE <= ESTIMATED_SLOPE_FILTERED
 *    Get_ayc_engine_control() = False
 *    TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_low
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False
 *    Get_tcs_long_sens_available() = False
 *    TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)
 *    Get_ayc_engine_control() = True
 *    TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE should False
 *    TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET should True
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP should False
 *    TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_pattern_ref_high_gsens
 *    TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER should 0
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_doubt_unknown
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP should True
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17673965-v1x, SW_REQ_17719925-v1x, SW_REQ_17749499-v1x, SW_REQ_17763308-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_02,"Test case TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_02")
{
  /*case Tc4wd_sup_act_doubt_ref_high:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_high,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET, True, "TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_pattern_ref_high_gsens, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_pattern_ref_high_gsens");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, False, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER == 0");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_high, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False");

#endif

  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.ENTRY_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.ENTRY_REF_FAILURE");
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED, "TC4WD_SUPPORT.ENTRY_SLOPE <= ESTIMATED_SLOPE_FILTERED");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, False, "Get_tcs_long_sens_available() = False");
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),False,"Get_ayc_engine_control() = False");
#endif/*CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH, True, "TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown");

  /*case Tc4wd_sup_act_doubt_ref_low:*/

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_low,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_low");

  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET, True, "TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP == True");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_pattern_ref_low, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_pattern_ref_low");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_low, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_low");

#endif

  COU_SET(TC4WD_SUPPORT.ENTRY_SLOPE, ESTIMATED_SLOPE_FILTERED + 500, "TC4WD_SUPPORT.ENTRY_SLOPE > (ESTIMATED_SLOPE_FILTERED + 400)");

#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, False, "Get_tcs_long_sens_available() = False");
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(Get_ayc_engine_control(),True,"Get_ayc_engine_control() = True");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH, True, "TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH = True");
#endif
#endif

#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_ACTIVATION() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_low
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_tcs_long_sens_available() = True
 *    Get_driver_req_idle_qf() = True
 *    TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_low
 *    TC4WD_SUPPORT.CONDITIONS.DOUBT1 = False
 *    TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() = True
 *    ESTIMATED_SLOPE_SAVE > (ESTIMATED_SLOPE_FILTERED - 400)
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens
 *    TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER < TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens
 *    TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER > TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 * e. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 * f. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens
 *    TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH != True
 *    Get_vsupp_clu_disabled() = False
 *    Get_tcs_my_split_modus() = False
 *    Get_vsupp_eng_disabled() = False
 *    Get_tcs_long_sens_available() = True
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_doubt_unknown
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_default
 * c.  incrementing TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTERby 1
 * d. TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER should TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 * e. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION should Tc4wd_sup_act_doubt_unknown
 * f. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_pattern_ref_high_brake
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17749804-v1x, SW_REQ_17764055-v1x, SW_REQ_17749886-v1x, SW_REQ_17764491-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_03,"Test case TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_03")
{
  pt_eng_id_t pt_eng_id;
  /*case Tc4wd_sup_act_pattern_ref_low:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_pattern_ref_low,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_low");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");

#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_LAT_ACCELERATION, Tcs_4wd_clutch_lat_acc_thr - 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");

#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1,"ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1,"ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");

#endif
#endif

  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO, Tcs_4wd_downhill_velo_thr + 1, "TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_low, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_low");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.DOUBT1, False, "TC4WD_SUPPORT.CONDITIONS.DOUBT1 = False");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, True, "Get_sensor_fault_wh1() = True");
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_SAVE,(ESTIMATED_SLOPE_FILTERED - 400) + 1,"ESTIMATED_SLOPE_SAVE > (ESTIMATED_SLOPE_FILTERED - 400) ");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 150), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_default");
  /*case Tc4wd_sup_act_pattern_ref_high_gsens:*/
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_pattern_ref_high_gsens,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");

  COU_SET(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME - 1, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER < TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");
  sint16 TC4WD_SUPPORT_COUNTERS_REF_HIGH_COUNTER_pre_val = TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT_COUNTERS_REF_HIGH_COUNTER_pre_val + 1, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER++");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_gsens, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");
  COU_SET(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME + 1, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER > TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 255), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER == TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_gsens, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");

#endif
#endif
  Tc4wd_Support_Conditions_Doubt2_Set ();
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_LAT_ACCELERATION, Tcs_4wd_clutch_lat_acc_thr - 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_gsens, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
#endif
  for ((pt_eng_id) = Pt_eng_id0; (pt_eng_id) <= Get_last_conf_pt_eng_id (); (pt_eng_id)++) /* All_configured_pt_eng_ids(pt_eng_id) replacement ?? */
    {
      COU_SET(TCS_END_TIMER[pt_eng_id], 2170, "TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u /*ms*/)"); // TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH = True
    }
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_default");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_START, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_START == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP  == True");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_gsens, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");

#endif
#endif
  for ((pt_eng_id) = Pt_eng_id0; (pt_eng_id) <= Get_last_conf_pt_eng_id (); (pt_eng_id)++) /* All_configured_pt_eng_ids(pt_eng_id) replacement ?? */
    {
      COU_SET(TCS_END_TIMER[pt_eng_id], 217, "TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u /*ms*/)"); // TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH != True
    }

  COU_SET(WHDYAC_DRIVING_SITUATION_I.TCS_MY_SPLIT_MODUS, False, "Get_tcs_my_split_modus() = False");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_LAT_ACCELERATION, (Tcs_4wd_clutch_lat_acc_thr + Tcs0_4wd_lat_acc_hyst) - 1, "Get_tcs_my_split_modus() = False");
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, False, "Get_vsupp_eng_disabled() = False");
  COU_SET(WHDYACFD_DISABLE.VSUPP_CLU_DISABLED, False, "Get_vsupp_clu_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False"); //TC4WD_SUPPORT.CONDITIONS.DO_GSENS = False
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_pattern_ref_high_brake");
#endif
#endif

}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_ACTIVATION() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake
 *    TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER < TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 *    Incrementing TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER  by 1
 *    TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake
 *    TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER > TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake
 *    TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_tcs_long_sens_available() = True
 *    Get_driver_req_idle_qf() = True
 *    TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake
 *    TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False
 *    ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr
 *    ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED
 *    Get_tcs_long_sens_available() = True
 *    Get_driver_req_idle_qf() = True
 *    TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr
 * d. (TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap)
 *    ESTIMATED_SLOPE_FILTERED < Tcs0_4wd_slope_thr
 *    return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = True
 *    TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER < TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    Get_tcs_long_sens_available() = True
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER == TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_START == False
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP == True
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens

 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17764641-v1x, SW_REQ_17764866-v1x, SW_REQ_17750043-v1x, SW_REQ_17765547-v1x, SW_REQ_17765887-v1x, SW_REQ_17766239-v1x, SW_REQ_17766270-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_04,"Test case TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_04")
{
  pt_eng_id_t pt_eng_id;
  /*case Tc4wd_sup_act_pattern_ref_high_brake:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake");
  COU_SET(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME - 1, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER < TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");
  sint16 TC4WD_SUPPORT_COUNTERS_REF_HIGH_COUNTER_pre_val = TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT_COUNTERS_REF_HIGH_COUNTER_pre_val + 1, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER ++");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake");
  COU_SET(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME + 1, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER > TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER == TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE + 1, "TC4WD_SUPPORT.REF_FAILURE > TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
  COU_SET(TCS_LAT_ACCELERATION, Tcs_4wd_clutch_lat_acc_thr - 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1, "ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO, Tcs_4wd_downhill_velo_thr + 1, "TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_act_doubt_unknown");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, False, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = False");
  COU_SET(TCS_LAT_ACCELERATION, Tcs_4wd_clutch_lat_acc_thr - 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr + 1, "ESTIMATED_SLOPE_FILTERED > Tcs0_4wd_slope_thr ");
  COU_SET(ESTIMATED_SLOPE_ACTUAL, ESTIMATED_SLOPE_FILTERED + 1, "ESTIMATED_SLOPE_ACTUAL >= ESTIMATED_SLOPE_FILTERED ");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(TCS_REFERENCE_VELO, Tcs_4wd_downhill_velo_thr + 1, "TCS_REFERENCE_VELO > Tcs_4wd_downhill_velo_thr");

  for ((pt_eng_id) = Pt_eng_id0; (pt_eng_id) <= Get_last_conf_pt_eng_id (); (pt_eng_id)++) /* All_configured_pt_eng_ids(pt_eng_id) replacement ?? */
    {
      COU_SET(TCS_END_TIMER[pt_eng_id], 2170, "TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u /*ms*/)"); // TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH = True
    }
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION == Tc4wd_sup_default");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_START, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_START == False");
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP == True");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake");
  COU_SET(TC4WD_SUPPORT.REF_FAILURE, TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE - 1, "TC4WD_SUPPORT.REF_FAILURE < TC4WD_SUPPORT.THRESHOLDS.MAX_REF_FAILURE");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, True, "Get_sensor_fault_wh1() = True");
#endif

  for ((pt_eng_id) = Pt_eng_id0; (pt_eng_id) <= Get_last_conf_pt_eng_id (); (pt_eng_id)++) /* All_configured_pt_eng_ids(pt_eng_id) replacement ?? */
    {
      COU_SET(TCS_END_TIMER[pt_eng_id], 217, "TCS_END_TIMER[pt_eng_id] <= Scaled_time(2170u /*ms*/)"); // TC4WD_SUPPORT.CONDITIONS.STOP_TOO_HIGH != True
    }
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TC4WDREF_LONG_SENS_VEHACC_MAX, (100 * Tcs0_4wd_possible_accel_gap) - 1, "(TC4WDREF_LONG_SENS_VEHACC_MAX - TCS_LONG_SENS_VEHACC) < (100 * Tcs0_4wd_possible_accel_gap) ");
#if (CFG_SENSOR_ACC_LONG)
  COU_SET(ESTIMATED_SLOPE_FILTERED, Tcs0_4wd_slope_thr - 1, " ESTIMATED_SLOPE_FILTERED < Tcs0_4wd_slope_thr");
#endif
#endif
  COU_SET(GET_WHDYAC_ENGDEC_ACTIVE_SUM_mtc__return, True, "return value of function GET_WHDYAC_ENGDEC_ACTIVE_SUM(Whdyac_engdec_service_etc) = True");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME - 10, "TC4WD_SUPPORT.COUNTERS.REF_HIGH_COUNTER < TC4WD_SUPPORT.THRESHOLDS.GSENS_MAX_TIME");
#endif
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_gsens, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_gsens");
  /*default:*/
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_pattern_ref_high_brake + 3, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_pattern_ref_high_brake");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT = True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_METHOD() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER = True
 * b. Do Clutch Set
 *    TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER = True
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER = True
 *    Conditions Do Engine Set
 *    set DO BRAKE
 *    Get_pulled_handbr_recognized() = True
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER = True
 *    Do Clutch Reset
 *    Do Brake Reset
 *    Do Engine Set
 * e. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER = True
 *    Do Clutch Reset
 *    Do Brake Set
 *    Do Engine Reset
 * f. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER = True
 *    Do Clutch Reset
 *    Do Brake Reset
 *    Do Engine Reset
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.EVENTS.E_DECIDER == False
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_clutch
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_both
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_engine
 * e. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_brake
 * f. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17688296-v1x, SW_REQ_17766363-v1x, SW_REQ_17690502-v1x, SW_REQ_17768588-v1x, SW_REQ_17768592-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_METHOD_Test_01,"Test case TC4WD_SUPPORT_CHECK_STATE_METHOD_Test_01")
{
  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)

  /*case Tc4wd_sup_default:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 100), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DECIDER, False, "TC4WD_SUPPORT.EVENTS.E_DECIDER == False");
#endif
#endif
  /*----------------------------------------------- */
  /*                  set DO_CLUTCH                 */
  /*----------------------------------------------- */
  Tc4wd_Support_Conditions_Do_Clutch_Set ();
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");
#endif
#endif
#if ((POWERTRAIN_CFG & 0x01) != 0)
#if (TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1)
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD,Tc4wd_sup_method_clutch, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_clutch");
#endif
#endif
#endif/* TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1 */
#endif /* POWERTRAIN_CFG & 0x01 */

  Tc4wd_Support_Conditions_Do_Clutch_Reset ();
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");
#endif
#endif
  /*----------------------------------------------- */
  /*    set DO_ENGINE  (SppDoEng)                   */
  /*----------------------------------------------- */
  Tc4wd_Support_Conditions_Do_Engine_Set ();
  /*----------------------------------------------- */
  /*    set DO_BRAKE  (SppDoBrk)                    */
  /*----------------------------------------------- */
  Tc4wd_Support_Conditions_Do_Brake_Set ();
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
#endif

#if ((POWERTRAIN_CFG & 0x01) != 0)
#if (TC4WD_NO_TOD_CLUTCH_OPEN_CFG != 1)
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, True,"Get_pulled_handbr_recognized() = True");
#endif
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))

#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif // Resetting Back to original value of global variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0]
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");

#endif
#endif
  Tc4wd_Support_Conditions_Do_Clutch_Reset ();
  Tc4wd_Support_Conditions_Do_Brake_Reset ();
  Tc4wd_Support_Conditions_Do_Engine_Set ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_engine, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_engine");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");
#endif
#endif
  Tc4wd_Support_Conditions_Do_Clutch_Reset ();
  Tc4wd_Support_Conditions_Do_Brake_Set ();
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
#endif
  Tc4wd_Support_Conditions_Do_Engine_Reset ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_brake");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER = True");
#endif
#endif
  Tc4wd_Support_Conditions_Do_Clutch_Reset ();
  Tc4wd_Support_Conditions_Do_Engine_Reset ();
  Tc4wd_Support_Conditions_Do_Brake_Reset ();
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_METHOD() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_clutch
 *    TC4WD_SUPPORT.EVENTS.E_CLUTCH_DONE = True
 *
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_clutch
 *    TC4WD_SUPPORT.EVENTS.E_CLUTCH_DONE = False
 *
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_brake
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = True
 *
 * d. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_brake
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = False
 *    TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE = True
 *
 * e. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_brake
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = False
 *    TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE = False
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default
 * b. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_both
 * c. TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD != Tc4wd_sup_default
 * d. TC4WD_SUPPORT.EVENTS.E_BRAKE_START == False
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17768624-v1x, SW_REQ_17768638-v1x, SW_REQ_17768645-v1x, SW_REQ_17768659-v1x, SW_REQ_17768664-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_METHOD_Test_02,"Test case TC4WD_SUPPORT_CHECK_STATE_METHOD_Test_02")
{
  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)

  /*case Tc4wd_sup_method_clutch:*/
#if ((POWERTRAIN_CFG & 0x01) != 0)
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD,Tc4wd_sup_method_clutch,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_clutch");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_CLUTCH_DONE,True,"TC4WD_SUPPORT.EVENTS.E_CLUTCH_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD,Tc4wd_sup_method_clutch,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_clutch");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_CLUTCH_DONE,False,"TC4WD_SUPPORT.EVENTS.E_CLUTCH_DONE = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_NOT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD != Tc4wd_sup_default");
#endif
#endif
#endif

  /*case Tc4wd_sup_method_brake:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_brake");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_brake");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_high, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high"); // TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE = True
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_both");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_brake, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_brake");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_low, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION != Tc4wd_sup_act_doubt_ref_high"); // TC4WD_SUPPORT.CONDITIONS.DO_ENGINE_AFTER_BRAKE = False
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_NOT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_both");

  /*case Tc4wd_sup_method_engine:*/
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_engine, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_engine");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_ENGINE_DONE, True, "TC4WD_SUPPORT.EVENTS.E_ENGINE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_engine, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_engine");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_ENGINE_DONE, False, "TC4WD_SUPPORT.EVENTS.E_ENGINE = False");
  /*TC4WD_SUPPORT.CONDITIONS.DO_BRAKE_AFTER_ENGINE = True*/
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, False, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = False");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.DOUBT1, True, "TC4WD_SUPPORT.CONDITIONS.DOUBT1 = True");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_high, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
#endif

#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_method_both");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif

  /*case Tc4wd_sup_method_both:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_both");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = True");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_ENGINE_DONE, True, "TC4WD_SUPPORT.EVENTS.E_ENGINE_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_both");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_NOT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD = Tc4wd_sup_method_both");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE_DONE = True");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_ENGINE_DONE, False, "TC4WD_SUPPORT.EVENTS.E_ENGINE_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_NOT_EQUAL(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD == Tc4wd_sup_default");

  /*default:*/
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD, Tc4wd_sup_method_both + 5, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_METHOD != Tc4wd_sup_method_both");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_BRAKE_START, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE_START == False");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_METHOD() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_default, "case Tc4wd_sup_default"
 *    TC4WD_SUPPORT.EVENTS.E_ENGINE = True
 * b. case Tc4wd_sup_engine_controlled
 *    Get_vsupp_eng_disabled() = True
 *    Get_tcs_long_sens_available() = True
 *    Get_driving_direction_valid() = True
 *    Get_reverse_driving_info() = False
 *    Get_ayc_reverse_movement() = False
 *    Get_ayc_reverse_det_possible() = False
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 * c. case Tc4wd_sup_engine_controlled
 *    Get_vsupp_eng_disabled() = False
 *    Get_tcs_long_sens_available() = True
 *    Get_driving_direction_valid() = True
 *    Get_reverse_driving_info() = False
 *    Get_ayc_reverse_movement() = False
 *    Get_ayc_reverse_det_possible() = False
 *    Get_sensor_fault_wh1() to Get_sensor_fault_wh4() = False
 *    TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER < TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.ENGINE_LOGIC == Tc4wd_sup_engine_controlled
 * b. TC4WD_SUPPORT.STATES.ENGINE_LOGIC == Tc4wd_sup_default
 * c. TC4WD_SUPPORT.EVENTS.E_DEFAULT == True
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17690563-v1x, SW_REQ_17768700-v1x, SW_REQ_17768705-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_ENGINE_Test_01,"Test case TC4WD_SUPPORT_CHECK_STATE_ENGINE_Test_01")
{
  sint16 TC4WD_SUPPORT_COUNTERS_ENGINE_COUNTER_Preval;
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_default, "case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_ENGINE, True, "TC4WD_SUPPORT.EVENTS.E_ENGINE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_engine_controlled, "TC4WD_SUPPORT.STATES.ENGINE_LOGIC == Tc4wd_sup_engine_controlled");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_engine_controlled, "case Tc4wd_sup_engine_controlled");
#endif
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, True, "Get_vsupp_eng_disabled() = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.ENGINE_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_engine_controlled, "case Tc4wd_sup_engine_controlled");
#endif
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, False, "Get_vsupp_eng_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, True, "Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO, False, "Get_reverse_driving_info() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))

  COU_SET(TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER, TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME + 1, "TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER < TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME");
  TC4WD_SUPPORT_COUNTERS_ENGINE_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))

  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.ENGINE_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_engine_controlled, "case Tc4wd_sup_engine_controlled");
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED, False, "Get_vsupp_eng_disabled() = False");
#endif
#endif
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE, True, "Get_tcs_long_sens_available() = True");
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID, True, "Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO, False, "Get_reverse_driving_info() = False");

#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False, "Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False, "Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False, "Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False, "Get_sensor_fault_wh4() = False");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER, TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME - 1, "TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER < TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME");
  TC4WD_SUPPORT_COUNTERS_ENGINE_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER;

#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER, TC4WD_SUPPORT_COUNTERS_ENGINE_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER++");
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC, Tc4wd_sup_engine_controlled + 1, "case default");

#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT == True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_METHOD() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. case Tc4wd_sup_default
 *    TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True
 * b. case Tc4wd_sup_engine_deadtime_running
 *    TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = False
 * c. case Tc4wd_sup_engine_deadtime_running
 *    TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_ENGINE_DEADTIMER = False
 *    TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER >= Tcs0_4wd_engine_deadtime_thr
 * d. case Tc4wd_sup_engine_deadtime_running
 *    TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True
 *    TC4WD_SUPPORT.CONDITIONS.RESET_ENGINE_DEADTIMER = False
 *    TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER < Tcs0_4wd_engine_deadtime_thr
 * e. case Tc4wd_sup_engine_deadtime_elapsed
 *    TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = False
 * f. case Tc4wd_sup_engine_deadtime_elapsed
 *    TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC = Tc4wd_sup_engine_deadtime_running
 * b. TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC = Tc4wd_sup_default
 * c. TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC = Tc4wd_sup_engine_deadtime_elapsed
 * d. TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER should increment by 1
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17691325-v1x, SW_REQ_17768729-v1x, SW_REQ_17768820-v1x, SW_REQ_17768867-v1x, SW_REQ_17768997-v1x, SW_REQ_17769019-v1x, SW_REQ_17769021-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_ENGINE_Test_02,"Test case TC4WD_SUPPORT_CHECK_STATE_ENGINE_Test_02")
{
  sint16 TC4WD_SUPPORT_COUNTERS_ENGINE_DEADTIME_COUNTER_Preval;
  /*case Tc4wd_sup_default:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_default, "case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_running, "TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC = Tc4wd_sup_engine_deadtime_running");

  /*case Tc4wd_sup_engine_deadtime_running:*/
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_running, "case Tc4wd_sup_engine_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE, False, "TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC = Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_running, "case Tc4wd_sup_engine_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.RESET_ENGINE_DEADTIMER, False, "TC4WD_SUPPORT.CONDITIONS.RESET_ENGINE_DEADTIMER = False");
  COU_SET(TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER, Tcs0_4wd_engine_deadtime_thr, "TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER >= Tcs0_4wd_engine_deadtime_thr");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_elapsed, "TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC = Tc4wd_sup_engine_deadtime_elapsed");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_running, "case Tc4wd_sup_engine_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.RESET_ENGINE_DEADTIMER, False, "TC4WD_SUPPORT.CONDITIONS.RESET_ENGINE_DEADTIMER = False");
  COU_SET(TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER, Tcs0_4wd_engine_deadtime_thr - 1, "TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER < Tcs0_4wd_engine_deadtime_thr");
  TC4WD_SUPPORT_COUNTERS_ENGINE_DEADTIME_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER, TC4WD_SUPPORT_COUNTERS_ENGINE_DEADTIME_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER++");

  /*case Tc4wd_sup_engine_deadtime_elapsed:*/
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_elapsed, "case Tc4wd_sup_engine_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE, False, "TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_elapsed, "case Tc4wd_sup_engine_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_ENGINE_ACTIVE = True");
  TC4WD_SUPPORT_COUNTERS_ENGINE_DEADTIME_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER, TC4WD_SUPPORT_COUNTERS_ENGINE_DEADTIME_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.ENGINE_DEADTIME_COUNTER++");

  /*default:*/
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_DEADTIME_LOGIC, Tc4wd_sup_engine_deadtime_elapsed + 1, "case default");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT == True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 * SW_REQ_17691636-v1x, SW_REQ_17769049-v1x
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_01,"Test case TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_01")
{
  sint16 TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval;
  /*   case Tc4wd_sup_default:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_default, "case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE = True");

#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_decision, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_brake_decision");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_default, "case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  //	TC4WD_SUPPORT.EVENTS.E_BRAKE_START = True
  //TC4WD_SUPPORT.EVENTS.E_BRAKE_STOP = False
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_ref_high, "case Tc4wd_sup_act_doubt_ref_high in TC4WD_SUPPORT_CHECK_STATE_ACTIVATION() function");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_brake_perm");

  /*   case Tc4wd_sup_brake_decision:*/
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_decision, "case Tc4wd_sup_brake_decision");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 10, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER > 0");
  TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval - 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER--");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_decision, "case Tc4wd_sup_brake_decision");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, Tcs0_4wd_brake_cycle_time + 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER = Tcs0_4wd_brake_cycle_time");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_decision, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC = Tc4wd_sup_brake_decision");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_decision, "case Tc4wd_sup_brake_decision");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 0, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC = Tc4wd_sup_default");

  /*   case Tc4wd_sup_brake_dec_dur_perm:*/
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_dec_dur_perm, "case Tc4wd_sup_brake_dec_dur_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 10, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER > 0");
  TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval - 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER--");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_dec_dur_perm, "case Tc4wd_sup_brake_dec_dur_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, Tcs0_4wd_brake_cycle_time + 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER = Tcs0_4wd_brake_cycle_time");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_dec_dur_perm, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC = Tc4wd_sup_brake_decision");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_dec_dur_perm, "case Tc4wd_sup_brake_dec_dur_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 0, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");

#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC = Tc4wd_sup_default");

  /*   case Tc4wd_sup_brake_perm:*/
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 10, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER > 0");
  TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, TC4WD_SUPPORT_COUNTERS_BRAKE_CYCLE_COUNTER_Preval - 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER--");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 0, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE, True, "TC4WD_SUPPORT.EVENTS.E_BRAKE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_dec_dur_perm, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_brake_dec_dur_perm");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 0, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION, Tc4wd_sup_act_doubt_unknown, "TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE, True, "TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER, 0, "TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE, False, "TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_brake_perm");

  /*   default:*/
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC, Tc4wd_sup_brake_perm + 2, "case default");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT == True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_02,"Test case TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_02")
{
  sint16 TC4WD_SUPPORT_COUNTERS_BRAKE_DEADTIME_COUNTER_Preval;
  /*   case Tc4wd_sup_default:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))       /* 23954:1ruckh200706 */

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_default, "case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_running, "TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC == Tc4wd_sup_brake_deadtime_running");
#endif
#endif
  /*   case Tc4wd_sup_brake_deadtime_running:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_running, "case Tc4wd_sup_brake_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, False, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_running, "case Tc4wd_sup_brake_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER, Tcs0_4wd_brake_deadtime_thr, "TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER >= Tcs0_4wd_brake_deadtime_thr");

#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_elapsed, "TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC == Tc4wd_sup_brake_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_running, "case Tc4wd_sup_brake_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE = True");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER, Tcs0_4wd_brake_deadtime_thr - 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER < Tcs0_4wd_brake_deadtime_thr");
  TC4WD_SUPPORT_COUNTERS_BRAKE_DEADTIME_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER, TC4WD_SUPPORT_COUNTERS_BRAKE_DEADTIME_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER++");

  /*   case Tc4wd_sup_brake_deadtime_elapsed:*/
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_elapsed, "case Tc4wd_sup_brake_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, False, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE == False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC = Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_elapsed, "case Tc4wd_sup_brake_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE, True, "TC4WD_SUPPORT.STATE_INFOS.S_BRAKE_ACTIVE == True");
  TC4WD_SUPPORT_COUNTERS_BRAKE_DEADTIME_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER;
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER, TC4WD_SUPPORT_COUNTERS_BRAKE_DEADTIME_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.BRAKE_DEADTIME_COUNTER");

  /*   default:*/
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC, Tc4wd_sup_brake_deadtime_elapsed + 2, "case default");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT == True");

#endif
#endif
  /* switch TC4WD_SUPPORT.STATES.BRAKE_DEADTIME_LOGIC */

}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_03,"Test case TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_03")
{
#if (CFG_SENSOR_TEM_HCU)
  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)
#endif
  /*case Tc4wd_sup_brake_circle_dk:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk,"case Tc4wd_sup_brake_circle_dk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE == True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE, False, "TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = False");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE,True,"TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk,"case Tc4wd_sup_brake_circle_dk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE == True");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;

#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED,31,"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED > 0");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");
#endif
#endif
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, False,"Get_tcs_vehicle_braking() = False");
  COU_SET(WHDYACFD_DISABLE.VSUPP_BRK_DISABLED,False,"Get_vsupp_brk_disabled() = False");
  COU_SET(TCS_HCU_TEMPERATURE,0,"TCS_HCU_TEMPERATURE > -150");
  COU_SET(SENSOR_SIGNALS.TCS_HCU_TEMPERATURE_AVAILABLE,True,"Get_tcs_hcu_temp_avail() == True");
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");

#endif  /*(POWERTRAIN_CFG & 0x01) != 0*/
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_sk, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk,"case Tc4wd_sup_brake_circle_dk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE == True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_sk_zero, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk_zero");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk,"case Tc4wd_sup_brake_circle_dk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,False,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = False");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, True,"Get_tcs_vehicle_braking() = True");
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_dk_zero, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_dk_zero");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_04,"Test case TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_04")
{
#if (CFG_SENSOR_TEM_HCU)
  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)
#endif
  /* case Tc4wd_sup_brake_circle_dk_zero:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk_zero,"case Tc4wd_sup_brake_circle_dk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE, False, "TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE == False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE,True,"TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk_zero,"case Tc4wd_sup_brake_circle_dk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED,31,"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED > 0");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");
#endif
#endif

#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, False,"Get_tcs_vehicle_braking() = False");
  COU_SET(WHDYACFD_DISABLE.VSUPP_BRK_DISABLED,False,"Get_vsupp_brk_disabled() = False");
  COU_SET(TCS_HCU_TEMPERATURE,0,"TCS_HCU_TEMPERATURE > -150");
  COU_SET(SENSOR_SIGNALS.TCS_HCU_TEMPERATURE_AVAILABLE,True,"Get_tcs_hcu_temp_avail() == True");
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");

#endif  /*(POWERTRAIN_CFG & 0x01) != 0*/
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_sk, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk_zero,"case Tc4wd_sup_brake_circle_dk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, True,"Get_tcs_vehicle_braking() = True");

#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_sk_zero, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk_zero");
#endif
#endif

}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_05,"Test case TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_05")
{
#if (CFG_SENSOR_TEM_HCU)
  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)
#endif
  /*   case Tc4wd_sup_brake_circle_sk:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk_zero,"case Tc4wd_sup_brake_circle_dk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE, False, "TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE == False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE,True,"TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk,"case Tc4wd_sup_brake_circle_sk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, False,"Get_tcs_vehicle_braking() = False");
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED,31,"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED > 0");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");

#endif
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_BRK_DISABLED,False,"Get_vsupp_brk_disabled() = False");
  COU_SET(TCS_HCU_TEMPERATURE,0,"TCS_HCU_TEMPERATURE > -150");
#if ((POWERTRAIN_CFG & 0x01) != 0)
  COU_SET(SENSOR_SIGNALS.TCS_HCU_TEMPERATURE_AVAILABLE,True,"Get_tcs_hcu_temp_avail() == True");
  bus_clutch_signal_t bus_clutch_signal;
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");

#endif  /*(POWERTRAIN_CFG & 0x01) != 0*/
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_dk, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_dk");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk,"case Tc4wd_sup_brake_circle_sk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, True,"Get_tcs_vehicle_braking() = True");

#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_dk_zero, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_dk_zero");
#endif
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk,"case Tc4wd_sup_brake_circle_sk");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,False,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = False");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, True,"Get_tcs_vehicle_braking() = True");

#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_sk_zero, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk_zero");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_06,"Test case TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_06")
{
#if (CFG_SENSOR_TEM_HCU)
  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)
#endif
  /*case Tc4wd_sup_brake_circle_sk_zero:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk_zero,"case Tc4wd_sup_brake_circle_sk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE, False, "TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE == False");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE,True,"TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk_zero,"case Tc4wd_sup_brake_circle_sk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif

#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, False,"Get_tcs_vehicle_braking() = False");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED,31,"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED > 0");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");
#endif
#endif
  COU_SET(WHDYACFD_DISABLE.VSUPP_BRK_DISABLED,False,"Get_vsupp_brk_disabled() = False");
  COU_SET(TCS_HCU_TEMPERATURE,0,"TCS_HCU_TEMPERATURE > -150");
  COU_SET(SENSOR_SIGNALS.TCS_HCU_TEMPERATURE_AVAILABLE,True,"Get_tcs_hcu_temp_avail() == True");
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");

#endif  /*(POWERTRAIN_CFG & 0x01) != 0*/
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_dk, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_dk");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 0;
#endif /*CFG_SENSOR_TEM_HCU*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk_zero,"case Tc4wd_sup_brake_circle_sk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if (CFG_SENSOR_TEM_HCU)
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, True,"Get_tcs_vehicle_braking() = True");

#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE, Tc4wd_sup_brake_circle_dk_zero, "TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_dk_zero");
#endif
#endif
  /*   default:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk_zero + 5,"case default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT = True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_CLUTCH_Test_01,"Test case TC4WD_SUPPORT_CHECK_STATE_CLUTCH_Test_01")
{
#if ((POWERTRAIN_CFG & 0x01) != 0)
  sint16 TC4WD_SUPPORT_COUNTERS_CLUTCH_COUNTER_Preval;
  bus_clutch_signal_t bus_clutch_signal;

  /*   default:*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_LOGIC,Tc4wd_sup_clutch_controlled + 5,"case default");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT == True");

  /*case Tc4wd_sup_default::*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_LOGIC,Tc4wd_sup_default,"case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_CLUTCH,True,"TC4WD_SUPPORT.EVENTS.E_CLUTCH = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.CLUTCH_LOGIC, Tc4wd_sup_clutch_controlled, "TC4WD_SUPPORT.STATES.CLUTCH_LOGIC == Tc4wd_sup_clutch_controlled");

  /*   case Tc4wd_sup_clutch_controlled:*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_LOGIC,Tc4wd_sup_clutch_controlled,"case Tc4wd_sup_clutch_controlled");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_CLUTCH,True,"TC4WD_SUPPORT.EVENTS.E_CLUTCH = True");
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, True,"Get_pulled_handbr_recognized() = True"); //TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH = True
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.CLUTCH_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.CLUTCH_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_LOGIC,Tc4wd_sup_clutch_controlled,"case Tc4wd_sup_clutch_controlled");//TC4WD_SUPPORT.CONDITIONS.STOP_CLUTCH = False
  COU_SET(TCS_SENSOR_STATE.PULLED_HANDBRAKE_RECOGNIZED, False,"Get_pulled_handbr_recognized() = False");
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");
  COU_SET(WHDYACFD_DISABLE.VSUPP_CLU_DISABLED,False,"Get_vsupp_clu_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE,True,"Get_tcs_long_sens_available() = True");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False,"Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False,"Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False,"Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False,"Get_sensor_fault_wh4() = False");
#if (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE )
  COU_SET(TCS_RESISTANCE_ROAD, Tcs0_4wd_resist_cond_clutch - 1,"TCS_RESISTANCE_ROAD < Tcs0_4wd_resist_cond_clutch");
#endif
  COU_SET(TC4WD_SUPPORT.COUNTERS.CLUTCH_COUNTER, TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME + 1,"TC4WD_SUPPORT.COUNTERS.CLUTCH_COUNTER > TC4WD_SUPPORT.THRESHOLDS.CLUTCH_MAX_TIME");
  TC4WD_SUPPORT_COUNTERS_CLUTCH_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.CLUTCH_COUNTER;
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.CLUTCH_COUNTER, TC4WD_SUPPORT_COUNTERS_CLUTCH_COUNTER_Preval, "TC4WD_SUPPORT.COUNTERS.CLUTCH_COUNTER++");

#endif  /* POWERTRAIN_CFG & 0x01 */
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_BRAKE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. case Tc4wd_sup_default
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_CLUTCH_Test_02,"Test case TC4WD_SUPPORT_CHECK_STATE_CLUTCH_Test_02")
{
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
  sint16 TC4WD_SUPPORT_COUNTERS_CLUTCH_DEADTIME_COUNTER_Preval;

  /*   case Tc4wd_sup_default:*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_default,"case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, True,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_running, "TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC == Tc4wd_sup_clutch_deadtime_running");

  /*   case Tc4wd_sup_clutch_deadtime_running:*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_running,"case Tc4wd_sup_clutch_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_running,"case Tc4wd_sup_clutch_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, True,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = True");
#if (TCS_CONTINOUS_CLUTCH_CFG)
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,0,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 0");
#else
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,0,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 0");
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, 0, "TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER = 0");

  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_running,"case Tc4wd_sup_clutch_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, True,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = True");
#if (TCS_CONTINOUS_CLUTCH_CFG)
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,600,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200");
#else
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,600,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200");
#endif
  COU_SET(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, Tcs0_4wd_clutch_deadtime_thr,"TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER >= Tcs0_4wd_clutch_deadtime_thr");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_elapsed, "TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC = Tc4wd_sup_clutch_deadtime_elapsed");

  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_running,"case Tc4wd_sup_clutch_deadtime_running");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, True,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = True");
#if (TCS_CONTINOUS_CLUTCH_CFG)
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,600,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200");
#else
  COU_SET(TC4WD_SUPP_REQU.CLUTCH_TORQUE,600,"TC4WD_SUPP_REQU.CLUTCH_TORQUE = 200");
#endif
  COU_SET(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, Tcs0_4wd_clutch_deadtime_thr - 1,"TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER < Tcs0_4wd_clutch_deadtime_thr");
  TC4WD_SUPPORT_COUNTERS_CLUTCH_DEADTIME_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER;
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, TC4WD_SUPPORT_COUNTERS_CLUTCH_DEADTIME_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER++");

  /* case Tc4wd_sup_clutch_deadtime_elapsed:*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_elapsed,"case Tc4wd_sup_clutch_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC == Tc4wd_sup_default");

  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_elapsed,"case Tc4wd_sup_clutch_deadtime_elapsed");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, True,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = True");
  TC4WD_SUPPORT_COUNTERS_CLUTCH_DEADTIME_COUNTER_Preval = TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER;
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER, TC4WD_SUPPORT_COUNTERS_CLUTCH_DEADTIME_COUNTER_Preval + 1, "TC4WD_SUPPORT.COUNTERS.CLUTCH_DEADTIME_COUNTER++");

  /*   default:*/
  COU_SET(TC4WD_SUPPORT.STATES.CLUTCH_DEADTIME_LOGIC, Tc4wd_sup_clutch_deadtime_elapsed + 5,"case default");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT == True");

#endif  /* POWERTRAIN_CFG & 0x01 */
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_CHECK_STATE_REFERENCE() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. case Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_FAILURE = True
 * b. case Tc4wd_sup_default
 *    TC4WD_SUPPORT.EVENTS.E_FAILURE = False
 *
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE should equal to Tc4wd_sup_in_doubt
 * b. TC4WD_SUPPORT.REF_FAILURE == MAX(TC4WD_SUPPORT.REF_FAILURE, 0)
 *
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_CHECK_STATE_REFERENCE_Test_01,"Test case TC4WD_SUPPORT_CHECK_STATE_REFERENCE_Test_01")
{
  /*   case Tc4wd_sup_default:*/
  COU_SET(BUS_ENGINE_SIGNAL_QUALITY.DRIVER_REQ_IDLE_QF, True, "Get_driver_req_idle_qf() = True");
  COU_SET(GET_DRIVER_REQ_IDLE__return, True, "Get_driver_req_idle((uint16)Tcs0_pedal_pos_idle_thr) = 1u");
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE,Tc4wd_sup_default,"case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_FAILURE,True,"TC4WD_SUPPORT.EVENTS.E_FAILURE = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE, Tc4wd_sup_in_doubt, "TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE == Tc4wd_sup_in_doubt");
  COU_SET(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE,Tc4wd_sup_default,"case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_FAILURE,False,"TC4WD_SUPPORT.EVENTS.E_FAILURE = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.REF_FAILURE, (wheel_velocity_t)MAX(TC4WD_SUPPORT.REF_FAILURE, 0), "TC4WD_SUPPORT.REF_FAILURE == (wheel_velocity_t)MAX(TC4WD_SUPPORT.REF_FAILURE, 0)");
#endif
#endif
  /*   case Tc4wd_sup_in_doubt:*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE,Tc4wd_sup_in_doubt,"case Tc4wd_sup_in_doubt");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET,True,"TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET = True");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE, Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE,Tc4wd_sup_in_doubt,"case Tc4wd_sup_in_doubt");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET,False,"TC4WD_SUPPORT.EVENTS.E_FAILURE_RESET = False");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.REF_FAILURE,(wheel_velocity_t)MAX(TC4WD_SUPPORT.REF_FAILURE, -Tcs0_4wd_max_ref_failure), "TC4WD_SUPPORT.REF_FAILURE == (wheel_velocity_t)MAX(TC4WD_SUPPORT.REF_FAILURE, -Tcs0_4wd_max_ref_failure)");
#endif
#endif
  /*default :*/
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_SET(TC4WD_SUPPORT.STATES.OBERSERVER_OF_REFERENCE,Tc4wd_sup_in_doubt + 2,"case default");
#endif
#endif
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
#if (SIGNAL_CALC_4WD_CFG)
#if (CFG_SENSOR_ACC_LONG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE))
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.EVENTS.E_DEFAULT, True, "TC4WD_SUPPORT.EVENTS.E_DEFAULT = True");
#endif
#endif
}

/**************************************************************************************************************************************/

/**
 * @brief
 *
 *
 * @description
 * Test case for TC4WD_SUPPORT_POST_PROCESSING() function
 *
 * @author
 * Anish Kumar
 *
 * @preconditions
 * a. TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk
 *    TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE = False
 * b. case Tc4wd_sup_brake_perm
 *    TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time
 *    TC4WD_SUPPORT.EVENTS.E_BRAKE = False
 *    TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True
 *    bus_clutch_signal.INFO.QUALIFIER = False
 *
 * @events
 * Calling function TC4WD_SUPPORT_ENTRY()
 *
 * @results
 * a. TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default
 * b.  Set_tc4supp_req_brk_press(WhFr, (brake_pressure_t)Tcs0_4wd_support_pressure_front)
 *     Set_tc4supp_req_brk_press(WhRl, (brake_pressure_t)Tcs0_4wd_support_pressure_rear)
 *     TC4WD_SUPP_CTRL.BRAKE_ACTIVE should True
 * @type
 * Elementary Comparison Test (ECT)
 *
 * @regression
 * No
 *
 * @integration
 * No
 *
 * @validates
 *
 */
COU_TEST(TC4WD_SUPPORT_POST_PROCESSING_Test_01,"Test case TC4WD_SUPPORT_POST_PROCESSING_Test_01")
{

#if (((POWERTRAIN_CFG & 0x01) != 0) && TCS_CONTINOUS_CLUTCH_CFG)
  /* --------------------------------------------------------------------- */
  /*                      request to pressure                              */
  /* --------------------------------------------------------------------- */

  sint16 *ptr = TCS0_4WD_REF_SUPP_BRAKE_ENABLE; // for chaging constant variable TCS0_4WD_REF_SUPP_BRAKE_ENABLE[0] to satisfy ( Tcs0_4wd_ref_supp_brake_enable != 0)
  sint32 engine_torque;

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk,"TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE = Tc4wd_sup_brake_circle_sk");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm + 2,"case default in function TC4WD_SUPPORT_CHECK_STATE_BRAKE() ");

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE,True,"TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_dk_zero,"case Tc4wd_sup_brake_circle_dk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, False,"Get_tcs_vehicle_braking() = False");
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED,31,"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED > 0");
  COU_SET(WHDYACFD_DISABLE.VSUPP_BRK_DISABLED,False,"Get_vsupp_brk_disabled() = False");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
  COU_SET(TCS_HCU_TEMPERATURE,0,"TCS_HCU_TEMPERATURE > -150");
  COU_SET(SENSOR_SIGNALS.TCS_HCU_TEMPERATURE_AVAILABLE,True,"Get_tcs_hcu_temp_avail() == True");
#if ((POWERTRAIN_CFG & 0x01) != 0)
  bus_clutch_signal_t bus_clutch_signal;
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");

#endif  /*(POWERTRAIN_CFG & 0x01) != 0*/
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif

  COU_ASSERT_EQUAL(TC4WD_SUPP_REQU.BRAKE_PRESSURE[WhFr], Tcs0_4wd_support_pressure_front, " Set_tc4supp_req_brk_press(WhFr, (brake_pressure_t)Tcs0_4wd_support_pressure_front)");
  COU_ASSERT_EQUAL(TC4WD_SUPP_REQU.BRAKE_PRESSURE[WhRl], Tcs0_4wd_support_pressure_rear, "Set_tc4supp_req_brk_press(WhRl, (brake_pressure_t)Tcs0_4wd_support_pressure_rear)");
  COU_ASSERT_EQUAL(TC4WD_SUPP_CTRL.BRAKE_ACTIVE, True, "TC4WD_SUPP_CTRL.BRAKE_ACTIVE = True");
  *ptr = 0;

  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_unknown,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_unknown");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE,True,"TC4WD_SUPPORT.EVENTS.E_DECIDER_DONE = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_default, "TC4WD_SUPPORT.STATES.BRAKE_LOGIC == Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_LOGIC,Tc4wd_sup_brake_perm,"case Tc4wd_sup_brake_perm");
  COU_SET(TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER,0,"TC4WD_SUPPORT.COUNTERS.BRAKE_CYCLE_COUNTER != Tcs0_4wd_brake_cycle_time");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_BRAKE,False,"TC4WD_SUPPORT.EVENTS.E_BRAKE = False");
  COU_SET(TC4WD_SUPPORT.STATES.BRAKE_ACTIVE_CIRCLE,Tc4wd_sup_brake_circle_sk_zero,"case Tc4wd_sup_brake_circle_sk_zero");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE,True,"TC4WD_SUPPORT.EVENTS.E_DK_SK_CHANGE = True");
#if (CFG_SENSOR_TEM_HCU)
  *ptr = 1;
  COU_SET(TCS_STATUS_FLAGS.TCS_VEHICLE_BRAKING, False,"Get_tcs_vehicle_braking() = False");
  COU_SET(TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED,31,"TC4WD_SUPPORT.BRAKE_TORQUE_REMAINED > 0");
  COU_SET(WHDYACFD_DISABLE.VSUPP_BRK_DISABLED,False,"Get_vsupp_brk_disabled() = False");
  COU_SET(TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING,True,"TC4WD_SUPPORT.CONDITIONS.VALID_FORWARD_DRIVING = True");
  COU_SET(TCS_HCU_TEMPERATURE,0,"TCS_HCU_TEMPERATURE > -150");
  COU_SET(SENSOR_SIGNALS.TCS_HCU_TEMPERATURE_AVAILABLE,True,"Get_tcs_hcu_temp_avail() == True");
#if ((POWERTRAIN_CFG & 0x01) != 0)
  COU_SET(bus_clutch_signal.INFO.QUALIFIER, False,"bus_clutch_signal.INFO.QUALIFIER = False");
  COU_SET(TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE, False,"TC4WD_SUPPORT.STATE_INFOS.S_CLUTCH_ACTIVE = False");

#endif  /*(POWERTRAIN_CFG & 0x01) != 0*/
#endif /*CFG_SENSOR_TEM_HCU*/
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPP_REQU.BRAKE_PRESSURE[WhFl], Tcs0_4wd_support_pressure_front, " Set_tc4supp_req_brk_press(WhFr, (brake_pressure_t)Tcs0_4wd_support_pressure_front)");
  COU_ASSERT_EQUAL(TC4WD_SUPP_REQU.BRAKE_PRESSURE[WhRr], Tcs0_4wd_support_pressure_rear, "Set_tc4supp_req_brk_press(WhRl, (brake_pressure_t)Tcs0_4wd_support_pressure_rear)");
  COU_ASSERT_EQUAL(TC4WD_SUPP_CTRL.BRAKE_ACTIVE, True, "TC4WD_SUPP_CTRL.BRAKE_ACTIVE = True");
  *ptr = 0;
  /* --------------------------------------------------------------------- */
  /*                       request to torque                               */
  /* --------------------------------------------------------------------- */
  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC,Tc4wd_sup_default,"case Tc4wd_sup_default");
  COU_SET(TC4WD_SUPPORT.EVENTS.E_ENGINE,True,"TC4WD_SUPPORT.EVENTS.E_ENGINE = True");
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPP_CTRL.ENGINE_ACTIVE, True, "TC4WD_SUPP_CTRL.ENGINE_ACTIVE = True");

  COU_SET(TC4WD_SUPPORT.STATES.ENGINE_LOGIC,Tc4wd_sup_engine_controlled,"case Tc4wd_sup_engine_controlled");
  COU_SET(WHDYACFD_DISABLE.VSUPP_ENG_DISABLED,False,"Get_vsupp_eng_disabled() = False");
  COU_SET(SENSOR_SIGNALS.TCS_LONG_SENS_AVAILABLE,True,"Get_tcs_long_sens_available() = True");
  COU_SET(TCS_STATUS_FLAGS.DRIVING_DIRECTION_VALID,True,"Get_driving_direction_valid() = True");
  COU_SET(TCS_STATUS_FLAGS.REVERSE_DRIVING_INFO,False,"Get_reverse_driving_info() = False");
#if (CFG_FUNCTION_AYC_CONFMODE != NOT_AVAILABLE)
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_MOVEMENT_DETECTED,False,"Get_ayc_reverse_movement() = False");
  COU_SET(AYC_GLOBAL_SITUATION_BITS.REVERSE_DETECTION_IS_POSSIBLE,False,"Get_ayc_reverse_det_possible() = False");
#endif
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH1, False,"Get_sensor_fault_wh1() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH2, False,"Get_sensor_fault_wh2() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH3, False,"Get_sensor_fault_wh3() = False");
  COU_SET(TCS_SENSOR_STATE.SENSOR_FAULT_WH4, False,"Get_sensor_fault_wh4() = False");
  COU_SET(TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER,TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME + 1,"TC4WD_SUPPORT.COUNTERS.ENGINE_COUNTER < TC4WD_SUPPORT.THRESHOLDS.ENGINE_MAX_TIME");
  COU_SET(TC4WD_SUPP_CTRL.ENGINE_ACTIVE,True,"Get_tc4supp_engine_active() = True");
  COU_SET(TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION,Tc4wd_sup_act_doubt_ref_high,"TC4WD_SUPPORT.STATES.DECIDER_ON_SUPPORT_ACTIVATION = Tc4wd_sup_act_doubt_ref_high");
  engine_torque = (sint32)Get_tc4supp_req_eng_torq() + Tcs0_4wd_supp_exit_step_slow;
#if ((SIGNAL_CALC_4WD_CFG && (CFG_FUNCTION_MTC_CONFMODE != NOT_AVAILABLE)) && (CFG_SENSOR_ACC_LONG))
  COU_CALL(TC4WD_SUPPORT_ENTRY (0, 300), "Calling TC4WD_SUPPORT_ENTRY() function");
#endif
  COU_ASSERT_EQUAL(TC4WD_SUPP_REQU.ENGINE_TORQUE, MIN(Tcs0_axle_engine_torque_max, engine_torque), "TC4WD_SUPP_REQU.ENGINE_TORQUE == MIN(Tcs0_axle_engine_torque_max, engine_torque) ");

#endif
}

/**************************************************************************************************************************************/




/** Unordered list of all test method s of the related suite. */
cou_test_t WhdyAcSigRef_tc4_supp_Package_01[] = {
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_01),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_02),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_03),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_04),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_05),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_06),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_07),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_08),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_09),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_10),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_11),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_12),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_13),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_14),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_15),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_16),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_17),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_18),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_19),
    COU_ADD_TEST(TC4WD_SUPPORT_PRE_PROCESSING_Test_20),
    COU_ADD_TEST_END, }; /* WhdyAcSigRef_tc4_supp_Package_01 */

cou_test_t WhdyAcSigRef_tc4_supp_Package_02[] = {
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_01),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_02),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_03),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_ACTIVATION_Test_04),

    COU_ADD_TEST_END, };/*WhdyAcSigRef_tc4_supp_Package_02*/

cou_test_t WhdyAcSigRef_tc4_supp_Package_03[] = {
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_METHOD_Test_01),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_METHOD_Test_02),

    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_ENGINE_Test_01),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_ENGINE_Test_02),

    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_01),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_02),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_03),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_04),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_05),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_BRAKE_Test_06),

    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_CLUTCH_Test_01),
    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_CLUTCH_Test_02),

    COU_ADD_TEST(TC4WD_SUPPORT_CHECK_STATE_REFERENCE_Test_01),

    COU_ADD_TEST(TC4WD_SUPPORT_POST_PROCESSING_Test_01),

    COU_ADD_TEST_END,

};/*WhdyAcSigRef_tc4_supp_Package_03*/


 COU_INIT(WhdyAcSigRef_Init, "WhdyAcSigRef Initialization")
{

} /* WhdyAcSigRef_Init */



cou_suite_t suites[] = {

    /*Anish*/
    COU_ADD_SUITE(WhdyAcSigRef_tc4_supp_Suite, WhdyAcSigRef_tc4_supp_Package_01,WhdyAcSigRef_Init, "Suite for tc4_supp source file"),
    COU_ADD_SUITE(WhdyAcSigRef_tc4_supp_Suite, WhdyAcSigRef_tc4_supp_Package_02,WhdyAcSigRef_Init, "Suite for tc4_supp source file"),
    COU_ADD_SUITE(WhdyAcSigRef_tc4_supp_Suite, WhdyAcSigRef_tc4_supp_Package_03,WhdyAcSigRef_Init, "Suite for tc4_supp source file"),

    COU_ADD_SUITE_END,

};
